{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DSSData","text":"<p>Welcome to DSSData's documentation. </p> <p>If you want to run a simple power flow, you can go to Getting started. </p> <p>There is also a more detailed tutorial in Learning DSSData that shows how to run a simple but complete probabilistic power flow. </p> <p>The rest of the docs describe each component of  DSSData in detail, with a full API Reference.</p> <p>Please, if you find some bug, report to us in our Issues Section.</p> <p>DSSData is built on OpenDSSDirect.py.</p>"},{"location":"#mode-support","title":"Mode support","text":"<ul> <li> <p>Static power flow.</p> </li> <li> <p>Time series power flow.</p> </li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python &gt;= 3.9</li> </ul>"},{"location":"#contributors","title":"Contributors","text":"<ul> <li>Jonas Villela \u2014 Contributions.</li> </ul>"},{"location":"LICENSE/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2020 Felipe Markson dos Santos Monteiro</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#dssdata.SystemClass","title":"<code>SystemClass</code>","text":"<p>The distribution system abstraction class.</p>"},{"location":"api/#dssdata.SystemClass.dss","title":"<code>dss</code>  <code>property</code>","text":"<p>The instance of OpenDSSDirect.py.</p>"},{"location":"api/#dssdata.SystemClass.dsscontent","title":"<code>dsscontent: List[str]</code>  <code>writable</code> <code>property</code>","text":"<p>The OpenDSS commands of the <code>.dss</code> file in path.</p> <p>As well, you can change the list of commands.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>OpenDSS commands.</p>"},{"location":"api/#dssdata.SystemClass.error","title":"<code>error: str</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The error of the last OpenDSS command.</p>"},{"location":"api/#dssdata.SystemClass.kV","title":"<code>kV: Iterable[float]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Iterable[float]</code> <p>The base voltages. See <code>voltagebases</code> in OpenDSS User Manual.</p>"},{"location":"api/#dssdata.SystemClass.loadmult","title":"<code>loadmult: float</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>float</code> <p>The load multiplier.  See <code>loadmult</code> in OpenDSS User Manual..</p>"},{"location":"api/#dssdata.SystemClass.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The name of the distribution system.</p>"},{"location":"api/#dssdata.SystemClass.path","title":"<code>path: str</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>The path of the <code>.dss</code> file.</p>"},{"location":"api/#dssdata.SystemClass.__init__","title":"<code>__init__(*, path, kV, loadmult=1)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the file that describes the distribution system.</p> required <code>kV</code> <code>Iterable[float]</code> <p>The base voltages. See <code>voltagebases</code> in OpenDSS User Manual.</p> required <code>loadmult</code> <code>float</code> <p>The load multiplier.  See <code>loadmult</code> in OpenDSS User Manual.</p> <code>1</code>"},{"location":"api/#dssdata.SystemClass.init_sys","title":"<code>init_sys()</code>","text":"<p>Run the commands in dsscontent.</p>"},{"location":"api/#dssdata.SystemClass.run_command","title":"<code>run_command(cmd)</code>","text":"<p>Run a comand on OpenDSS.</p> <p>Parameters:</p> Name Type Description Default <code>cmd</code> <code>str</code> <p>A OpenDSS command.</p> required <p>Raises:</p> Type Description <code>Exception</code> <p>If the command is invalid.</p> <p>Returns:</p> Type Description <code>str</code> <p>The OpenDSS command returns</p>"},{"location":"api/#dssdata.decorators","title":"<code>decorators</code>","text":""},{"location":"api/#dssdata.decorators.actions","title":"<code>actions(func)</code>","text":"<p>See Creating your first action.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable</code> <p>A action function</p> required"},{"location":"api/#dssdata.decorators.tools","title":"<code>tools(func)</code>","text":"<p>See Creating your first tool.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable</code> <p>A tool function</p> required <p>Returns:</p> Type Description <code>Callable</code> <p>The return of the tool function</p>"},{"location":"api/#dssdata.pfmodes","title":"<code>pfmodes</code>","text":""},{"location":"api/#dssdata.pfmodes.cfg_tspf","title":"<code>cfg_tspf(distSys, step_size='1h', initial_time=(0, 0))</code>","text":"<p>Set the time series mode in the distribution system.</p> <p>Parameters:</p> Name Type Description Default <code>distSys</code> <code>SystemClass</code> <p>An instance of SystemClass</p> required <code>step_size</code> <code>str</code> <p>The size of step time. See \"Stepsize\" in OpenDSS User Manual.</p> <code>'1h'</code> <code>initial_time</code> <code>tuple</code> <p>See \"Time\" in OpenDSS User Manual.</p> <code>(0, 0)</code>"},{"location":"api/#dssdata.pfmodes.run_static_pf","title":"<code>run_static_pf(distSys, actions=(lambda distSys: None), tools=(lambda distSys: None))</code>","text":"<p>Run the static power flow mode. To see how it works, see Learning DSSData.</p> <p>Parameters:</p> Name Type Description Default <code>distSys</code> <code>SystemClass</code> <p>An instance of SystemClass</p> required <code>actions</code> <code>Iterable[Callable]</code> <p>Actions functions.</p> <code>(lambda distSys: None)</code> <code>tools</code> <code>Iterable[Callable]</code> <p>Tools functions.</p> <code>(lambda distSys: None)</code> <p>Returns:</p> Type Description <code>tuple</code> <p>Tools functions returns</p>"},{"location":"api/#dssdata.pfmodes.run_tspf","title":"<code>run_tspf(distSys, num_steps, actions=(lambda distSys: None), tools=(lambda distSys: None))</code>","text":"<p>Run the time series power flow. To see how it works, see Learning DSSData.</p> <p>Parameters:</p> Name Type Description Default <code>distSys</code> <code>SystemClass</code> <p>An instance of SystemClass</p> required <code>num_steps</code> <p>Number of time steps.</p> required <code>actions</code> <code>Iterable[Callable]</code> <p>Actions functions.</p> <code>(lambda distSys: None)</code> <code>tools</code> <code>Iterable[Callable]</code> <p>Tools functions.</p> <code>(lambda distSys: None)</code> <p>Returns:</p> Type Description <code>Tuple[pandas.DataFrame]</code> <p>Tools functions returns for all steps</p>"},{"location":"api/#dssdata.reductions","title":"<code>reductions</code>","text":""},{"location":"api/#dssdata.reductions.regs","title":"<code>regs</code>","text":""},{"location":"api/#dssdata.reductions.regs.get_taps_changes","title":"<code>get_taps_changes(tapDataFrame)</code>","text":"<p>Count the taps changes. That function is a reduction function.</p> <p>E.g.: If a trafo starts in tap number 4 and goes to tap number -3. The result is 7. </p> <p><code>(4 -&gt; 3 -&gt; 2 -&gt; 1 -&gt; 0 -&gt; -1 -&gt; -2 -&gt; -3)</code></p> <p>Parameters:</p> Name Type Description Default <code>tapDataFrame</code> <code>pandas.DataFrame</code> <p>The return of get_all_taps_number or get_tap_number.</p> required <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>The number of taps changes after time series power flow.</p>"},{"location":"api/#dssdata.tools","title":"<code>tools</code>","text":""},{"location":"api/#dssdata.tools.lines","title":"<code>lines</code>","text":""},{"location":"api/#dssdata.tools.lines.get_all_infos","title":"<code>get_all_infos(distSys)</code>","text":"<p>Get some relevant infos from all lines. See get_infos.</p> <p>Parameters:</p> Name Type Description Default <code>distSys</code> <code>SystemClass</code> <p>An instance of  SystemClass</p> required <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>All lines infos</p>"},{"location":"api/#dssdata.tools.lines.get_infos","title":"<code>get_infos(distSys, names)</code>","text":"<p>Get some relevant infos from lines. Ex:</p> name bus1 ph_bus1 bus2 ph_bus2 I(A)_bus1_ph_a I(A)_bus1_ph_b I(A)_bus1_ph_c I(A)_bus2_ph_a I(A)_bus2_ph_b I(A)_bus2_ph_c ang_bus1_ph_a ang_bus1_ph_b ang_bus1_ph_c ang_bus2_ph_a ang_bus2_ph_b ang_bus2_ph_c kw_losses kvar_losses emergAmps normAmps perc_NormAmps perc_EmergAmps 0 650632 rg60 abc 632 abc 562.609 419.029 591.793 562.61 419.03 591.794 -28.7 -141.3 93.4 151.3 38.7 -86.6 60.737 196.015 600.0 400.0 1.479 0.986 1 632670 632 abc 670 abc 481.916 218.055 480.313 481.916 218.055 480.313 -27.2 -135.2 99.6 152.8 44.8 -80.4 12.991 41.495 600.0 400.0 1.205 0.803 2 670671 670 abc 671 abc 473.795 188.824 424.942 473.795 188.824 424.942 -27.0 -132.6 101.3 153.0 47.4 -78.7 22.729 72.334 600.0 400.0 1.184 0.79 <p>Parameters:</p> Name Type Description Default <code>distSys</code> <p>An instance of SystemClass.</p> required <code>names</code> <p>Lines names.</p> required <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Lines infos.</p>"},{"location":"api/#dssdata.tools.losses","title":"<code>losses</code>","text":""},{"location":"api/#dssdata.tools.losses.get_all_line_losses","title":"<code>get_all_line_losses(distSys)</code>","text":"<p>Get all lines losses.  Ex:</p> type name kw_losses kvar_losses 0 Line 650632 60.73738438443188 196.01456922721653 1 Line 632670 12.990633124585496 41.49451118066639 2 Line 670671 22.728758590972518 72.33414340631373 3 Line 671680 8.613828479544935e-12 -0.004169229516017848 4 Line 632633 0.8244871671261499 1.0561418323197722 5 Line 632645 2.75857850181032 2.4159107795492454 6 Line 645646 0.5274715389783668 0.41973513183818434 7 Line 692675 4.1629544212549225 2.419339661740261 8 Line 671684 0.5794876384501113 0.47068061342113654 9 Line 684611 0.3824044250881998 0.38734916932047053 10 Line 684652 0.7998267312559038 0.230879175578375 11 Line 671692 9.054614813067019e-06 4.3655745685100556e-14 <p>Parameters:</p> Name Type Description Default <code>distSys</code> <code>SystemClass</code> <p>An instance of  SystemClass</p> required <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>A DataFrame containing all line losses.</p>"},{"location":"api/#dssdata.tools.losses.get_all_pd_elements_losses","title":"<code>get_all_pd_elements_losses(distSys)</code>","text":"<p>Get all PD Elements losses.  Ex:</p> type name kw_losses kvar_losses 0 Transformer sub 0.03228776756674051 0.26246840671868993 1 Transformer reg1 0.12209426402417012 0.12385869008488953 2 Transformer reg2 0.06534502545557916 0.06707698704162612 3 Transformer reg3 0.1350894299906213 0.13685391995031387 4 Transformer xfm1 5.552671994055243 10.09627035828575 5 Line 650632 60.73738438443188 196.01456922721653 6 Line 632670 12.990633124585496 41.49451118066639 7 Line 670671 22.728758590972518 72.33414340631373 8 Line 671680 8.613828479544935e-12 -0.004169229516017848 9 Line 632633 0.8244871671261499 1.0561418323197722 10 Line 632645 2.75857850181032 2.4159107795492454 11 Line 645646 0.5274715389783668 0.41973513183818434 12 Line 692675 4.1629544212549225 2.419339661740261 13 Line 671684 0.5794876384501113 0.47068061342113654 14 Line 684611 0.3824044250881998 0.38734916932047053 15 Line 684652 0.7998267312559038 0.230879175578375 16 Line 671692 9.054614813067019e-06 4.3655745685100556e-14 <p>Parameters:</p> Name Type Description Default <code>distSys</code> <code>SystemClass</code> <p>An instance of  SystemClass</p> required <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>A DataFrame containing all PD Elements losses.</p>"},{"location":"api/#dssdata.tools.losses.get_all_transformers_losses","title":"<code>get_all_transformers_losses(distSys)</code>","text":"<p>Get all transformers losses.  Ex:</p> type name kw_losses kvar_losses 0 Transformer sub 0.03228776756674051 0.26246840671868993 1 Transformer reg1 0.12209426402417012 0.12385869008488953 2 Transformer reg2 0.06534502545557916 0.06707698704162612 3 Transformer reg3 0.1350894299906213 0.13685391995031387 4 Transformer xfm1 5.552671994055243 10.09627035828575 <p>Parameters:</p> Name Type Description Default <code>distSys</code> <code>SystemClass</code> <p>An instance of  SystemClass</p> required <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>A DataFrame containing all transformers losses.</p>"},{"location":"api/#dssdata.tools.losses.get_total_pd_elements_losses","title":"<code>get_total_pd_elements_losses(distSys)</code>","text":"<p>Get Total PD Elements losses.  Ex:</p> name kw_losses_total kvar_losses_total 0 all_pd_elements 112.39948405966965 327.9256193105294 <p>Parameters:</p> Name Type Description Default <code>distSys</code> <code>SystemClass</code> <p>An instance of  SystemClass</p> required <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>A DataFrame containing the sum of losses of all PD Elements.</p>"},{"location":"api/#dssdata.tools.losses.pd_element_loss","title":"<code>pd_element_loss(distSys, element_name, element_type)</code>","text":"<p>Get PD Element loss.  Ex:</p> type name kw_losses kvar_losses 0 Transformer xfm1 5.552671994055243 10.09627035828575 <p>Parameters:</p> Name Type Description Default <code>distSys</code> <code>SystemClass</code> <p>An instance of  SystemClass</p> required <code>element_name</code> <code>str</code> <p>The name of the desired PD element</p> required <code>element_type</code> <code>str</code> <p>The type of the PD element (Line or Transformer)</p> required <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>A DataFrame containing the losses of the desired PD element.</p>"},{"location":"api/#dssdata.tools.losses.pd_element_loss_list","title":"<code>pd_element_loss_list(distSys, element_names, element_type)</code>","text":"<p>Get PD Element loss List.  Ex:</p> type name kw_losses kvar_losses 0 Transformer sub 0.03228776756674051 0.26246840671868993 1 Transformer reg1 0.12209426402417012 0.12385869008488953 2 Transformer reg2 0.06534502545557916 0.06707698704162612 3 Transformer reg3 0.1350894299906213 0.13685391995031387 4 Transformer xfm1 5.552671994055243 10.09627035828575 <p>Parameters:</p> Name Type Description Default <code>distSys</code> <code>SystemClass</code> <p>An instance of  SystemClass</p> required <code>element_names</code> <code>list</code> <p>A list of names of the desired PD elements</p> required <code>element_type</code> <code>str</code> <p>The type of the PD elements (Line or Transformer)</p> required <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>A DataFrame containing the losses of the desired list of PD elements.</p>"},{"location":"api/#dssdata.tools.regs","title":"<code>regs</code>","text":""},{"location":"api/#dssdata.tools.regs.get_all_taps_number","title":"<code>get_all_taps_number(distSys)</code>","text":"<p>Get the tap number of all regulators.</p> <p>Parameters:</p> Name Type Description Default <code>distSys</code> <code>SystemClass</code> <p>An instance of  SystemClass.</p> required <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>The tap number of all regulators.</p>"},{"location":"api/#dssdata.tools.regs.get_tap_number","title":"<code>get_tap_number(distSys, names)</code>","text":"<p>Get the tap number of regulators.</p> <p>Parameters:</p> Name Type Description Default <code>distSys</code> <p>An instance of  SystemClass.</p> required <code>names</code> <p>Regulators names</p> required <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>The tap number of regulators.</p>"},{"location":"api/#dssdata.tools.voltages","title":"<code>voltages</code>","text":""},{"location":"api/#dssdata.tools.voltages.get_all","title":"<code>get_all(distSys)</code>","text":"<p>Get line to neutral voltages (module and angle) in p.u. and phases configuration from buses. See get_from_buses.</p> <p>Parameters:</p> Name Type Description Default <code>distSys</code> <p>An instance of  SystemClass.</p> required <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>[type]: Line to neutral voltages (module and angle) in p.u. and phases configuration from buses.</p>"},{"location":"api/#dssdata.tools.voltages.get_from_buses","title":"<code>get_from_buses(distSys, buses)</code>","text":"<p>Get line to neutral voltages (module and angle) in p.u. and phases configuration from buses. </p> bus_name v_pu_a v_pu_b v_pu_c ang_a ang_b ang_c phases 0 sourcebus 0.99997 0.99999 0.99995 30.0 -90.0 150.0 abc 1 646 NaN 1.01803 1.00026 NaN -122.0 117.8 bc 2 611 NaN NaN 0.96083 NaN NaN 115.7 c 3 652 0.97533 NaN NaN -5.3 NaN NaN a <p>Parameters:</p> Name Type Description Default <code>distSys</code> <p>An instance of  SystemClass.</p> required <code>buses</code> <p>Buses names.</p> required <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>[type]: Line to neutral voltages (module and angle) in p.u. and phases configuration from buses.</p>"},{"location":"gettingstart/","title":"Getting Started","text":""},{"location":"gettingstart/#installation","title":"Installation","text":"<p>We strongly recommend the use of virtual environments manager.</p>"},{"location":"gettingstart/#using-pip","title":"Using pip","text":"pip install dssdata"},{"location":"gettingstart/#using-poetry","title":"Using poetry","text":"poetry add dssdata"},{"location":"gettingstart/#samples","title":"Samples","text":""},{"location":"gettingstart/#static-power-flow-snapshot","title":"Static Power Flow (Snapshot)","text":"<p>Instance the class <code>SystemClass</code> indicating the path to the <code>.dss</code> file and the base system voltage.</p> <p>Execute a static power flow using <code>run_static_pf</code>, informing the instance of <code>SystemClass</code> and a <code>Tool</code>. The DSSData provides some tools to a quick start. </p> <pre><code>from dssdata import SystemClass\nfrom dssdata.pfmodes import run_static_pf\nfrom dssdata.tools import voltages\n\n\ndistSys = SystemClass(path=\"master.dss\", kV=[13.8], loadmult=1.2)\n\n[voltageDataFrame] = run_static_pf(distSys, tools=[voltages.get_all])\n</code></pre>"},{"location":"gettingstart/#time-series-power-flow","title":"Time series Power Flow","text":"<p>Instance the class <code>SystemClass</code> indicating the path to the <code>.dss</code> file and the base system voltage.</p> <p>Execute a time series power flow using <code>cfg_tspf</code> and <code>run_tspf</code>, informing the instance of <code>SystemClass</code> and a <code>Tool</code>. The DSSData provides some tools to a quick start. </p> <pre><code>from dssdata import SystemClass\nfrom dssdata.pfmodes import cfg_tspf, run_tspf\nfrom dssdata.tools import lines, voltages\n\n\ndistSys = SystemClass(path=\"master.dss\", kV=[13.8], loadmult=1.2)\n\ncfg_tspf(distSys, step_size=\"5m\", initial_time=(0, 0))\n\ntools = [voltages.get_all]\n\n[voltageDataFrame] = run_tspf(distSys, tools=tools, num_steps=288)\n</code></pre>"},{"location":"tutorial/","title":"Learning DSSData","text":"In\u00a0[1]: Copied! <pre>from dssdata import SystemClass\n\npath = \"IEEE13bus/IEEE13Nodeckt.dss\"\n\ndistSys = SystemClass(path=path, kV=[115, 4.16, 0.48])\nprint(distSys.name)\n</pre> from dssdata import SystemClass  path = \"IEEE13bus/IEEE13Nodeckt.dss\"  distSys = SystemClass(path=path, kV=[115, 4.16, 0.48]) print(distSys.name) <pre>ieee13nodeckt\n</pre> In\u00a0[2]: Copied! <pre>from dssdata.pfmodes import run_static_pf\nfrom dssdata.tools import voltages\nimport matplotlib.pyplot as plt # The plot lib.\n\n[busVoltageDF] = run_static_pf(distSys, tools=[voltages.get_all])\nbusVoltageDF.head(3)\n</pre> from dssdata.pfmodes import run_static_pf from dssdata.tools import voltages import matplotlib.pyplot as plt # The plot lib.  [busVoltageDF] = run_static_pf(distSys, tools=[voltages.get_all]) busVoltageDF.head(3) Out[2]: bus_name v_pu_a v_pu_b v_pu_c ang_a ang_b ang_c phase 0 sourcebus 1.0000 1.0000 1.0000 29.99 -90.01 149.99 abc 1 650 0.9999 1.0000 0.9999 -0.01 -120.01 119.99 abc 2 rg60 1.0560 1.0374 1.0560 -0.01 -120.01 119.98 abc <p>The static power flow mode always assures that the distribution system back to the initial state, as can be seen below.</p> <p>We will talk about action and tools in the next topics.</p> In\u00a0[3]: Copied! <pre>from dssdata.pfmodes import cfg_tspf, run_tspf\n</pre> from dssdata.pfmodes import cfg_tspf, run_tspf <p>The time-series power flow mode executes all steps required with actions and tools and only at the end of steps the distribution system back to the initial state, as can be seen below.</p> <p>For that, be careful when you will use actions in this mode.</p> In\u00a0[4]: Copied! <pre>import pandas\nfrom dssdata.decorators import tools\n\n@tools\ndef get_loss(distSys):\n    # Active the substation transformer\n    distSys.dss.Transformers.Name(\"Sub\")\n\n    # get the substation transformer losses\n    loss = distSys.dss.CktElement.Losses()\n\n    return pandas.DataFrame(data={\"kW\": [loss[0]], \"kVAr\": [loss[1]]})\n\n#Run static power flow.\n[loss] = run_static_pf(distSys, tools=[get_loss])\n\nloss\n</pre> import pandas from dssdata.decorators import tools  @tools def get_loss(distSys):     # Active the substation transformer     distSys.dss.Transformers.Name(\"Sub\")      # get the substation transformer losses     loss = distSys.dss.CktElement.Losses()      return pandas.DataFrame(data={\"kW\": [loss[0]], \"kVAr\": [loss[1]]})  #Run static power flow. [loss] = run_static_pf(distSys, tools=[get_loss])  loss Out[4]: kW kVAr 0 32.287666 262.467584 In\u00a0[5]: Copied! <pre>from dssdata.decorators import actions\nfrom numpy.random import normal\n\n@actions\ndef change_loads(distSys):\n    # Get all loads names.\n    loads_names = distSys.dss.Loads.AllNames()\n    for load_name in loads_names:\n        # Active the load\n        distSys.dss.Loads.Name(load_name)\n\n        # Get the active and reactive power of load.\n        kw = float(distSys.run_command(f\"? Load.{load_name}.kw\"))\n        kvar = float(distSys.run_command(f\"? Load.{load_name}.kvar\"))\n\n        # Generate a normal distributed value for active and reactive power.\n        new_kw = normal(kw, kw / 4)\n        new_kvar = normal(kvar, kvar / 4)\n\n        # Set the new values of active and reactive power.\n        distSys.run_command(f\"Load.{load_name}.kw = {new_kw}\")\n        distSys.run_command(f\"Load.{load_name}.kvar = {new_kvar}\")\n\n[loss] = run_static_pf(distSys, tools=[get_loss], actions=[change_loads]) \n\nloss\n</pre> from dssdata.decorators import actions from numpy.random import normal  @actions def change_loads(distSys):     # Get all loads names.     loads_names = distSys.dss.Loads.AllNames()     for load_name in loads_names:         # Active the load         distSys.dss.Loads.Name(load_name)          # Get the active and reactive power of load.         kw = float(distSys.run_command(f\"? Load.{load_name}.kw\"))         kvar = float(distSys.run_command(f\"? Load.{load_name}.kvar\"))          # Generate a normal distributed value for active and reactive power.         new_kw = normal(kw, kw / 4)         new_kvar = normal(kvar, kvar / 4)          # Set the new values of active and reactive power.         distSys.run_command(f\"Load.{load_name}.kw = {new_kw}\")         distSys.run_command(f\"Load.{load_name}.kvar = {new_kvar}\")  [loss] = run_static_pf(distSys, tools=[get_loss], actions=[change_loads])   loss Out[5]: kW kVAr 0 30.33043 246.809811 <p>Note that we use <code>run_command</code> to run a command directly in OpenDSS instead of <code>SystemClass.dss.run_command</code>. In this way, we prevent an invalid command from being executed silently.</p> <p>It is not necessary to worry about changes in the nominal value of the loads, the function <code>run_static_pf</code> is in charge of maintaining the information of the original distribution system.</p> In\u00a0[6]: Copied! <pre>def run_monte_carlo(times, actions = [lambda:None] , tools = [lambda:None]):\n    losses = []\n    for step in range(0, times):\n        [loss] = run_static_pf(distSys, actions=actions, tools=tools)\n        losses += [loss]\n    return losses\n\nlosses = run_monte_carlo(2, actions = [change_loads], tools = [get_loss])\nlosses\n</pre> def run_monte_carlo(times, actions = [lambda:None] , tools = [lambda:None]):     losses = []     for step in range(0, times):         [loss] = run_static_pf(distSys, actions=actions, tools=tools)         losses += [loss]     return losses  losses = run_monte_carlo(2, actions = [change_loads], tools = [get_loss]) losses Out[6]: <pre>[          kW      kVAr\n 0  21.992139  180.1035,\n           kW        kVAr\n 0  32.191289  261.696568]</pre> <p>However, the data is all in one list. To organize this data, we will create a <code>Reduction</code> called <code>reduce_losses</code>.</p> <p>A <code>Reduction</code> is a python function that takes a list of data from a <code>Tool</code> as a parameter and returns only a <code>pandas.DataFrame</code>.</p> In\u00a0[7]: Copied! <pre>def reduce_losses(losses):\n    # Create a empty data frame\n    losses_df = pandas.DataFrame()\n\n    # Concate all data frames in list\n    for loss in losses:\n        losses_df = pandas.concat([losses_df, loss], ignore_index=True)\n\n    return losses_df\n\nreduce_losses(losses)\n</pre> def reduce_losses(losses):     # Create a empty data frame     losses_df = pandas.DataFrame()      # Concate all data frames in list     for loss in losses:         losses_df = pandas.concat([losses_df, loss], ignore_index=True)      return losses_df  reduce_losses(losses) Out[7]: kW kVAr 0 21.992139 180.103500 1 32.191289 261.696568 <p>We can see the stochastic behavior of the substation transformer losses by executing our <code>run_mote_carlo</code> function, applying the <code>reduce_losses</code>, and generating a boxplot.</p> In\u00a0[8]: Copied! <pre>losses_many = run_monte_carlo(10000, actions = [change_loads], tools = [get_loss])\nlosses_df = reduce_losses(losses_many)\nlosses_df.boxplot(column=[\"kW\", \"kVAr\"])\nplt.show()\n</pre> losses_many = run_monte_carlo(10000, actions = [change_loads], tools = [get_loss]) losses_df = reduce_losses(losses_many) losses_df.boxplot(column=[\"kW\", \"kVAr\"]) plt.show() In\u00a0[9]: Copied! <pre>#Create the wind generator class.\nclass WindTurbineGeneratorAbstraction():\n    def __init__(self, kW, wind_rated, wind_cutin, wind_cutout, name):\n        self.kW = kW\n        self.wind_rated = wind_rated\n        self.cutin = wind_cutin\n        self.cutout = wind_cutout\n        self.name = name\n\n    #Linear Wind Turbine Generator power output model\n    def power_output(self, wind_speed):\n        if self.cutin &lt; wind_speed and wind_speed &lt;= self.wind_rated:            \n            return self.kW * (wind_speed - self.cutin) / (self.wind_rated - self.cutin)\n\n        elif self.wind_rated &lt; wind_speed and wind_speed &lt;= self.cutout:\n            return self.kW\n        else:\n            return 0.\n\n#Instance two wind generators.\nmyWTG1 = WindTurbineGeneratorAbstraction(1500, 11.8, 3.0, 20.0, \"wg1\")\nmyWTG2 = WindTurbineGeneratorAbstraction(1500, 11.8, 3.0, 20.0, \"wg2\")\n\n#Include the two generators in the distribution system.\ncmd = [\n    f\"New Generator.{myWTG1.name} bus1=675 Phases=3 kv=4.16 kw={myWTG1.kW} pf=1 model=1\",\n    f\"New Generator.{myWTG2.name} bus1=680 Phases=3 kv=4.16 kw={myWTG2.kW} pf=1 model=1\"\n    ]\ndistSys.dsscontent = distSys.dsscontent + cmd\n\n\ndistSys.dsscontent[-1]\n</pre> #Create the wind generator class. class WindTurbineGeneratorAbstraction():     def __init__(self, kW, wind_rated, wind_cutin, wind_cutout, name):         self.kW = kW         self.wind_rated = wind_rated         self.cutin = wind_cutin         self.cutout = wind_cutout         self.name = name      #Linear Wind Turbine Generator power output model     def power_output(self, wind_speed):         if self.cutin &lt; wind_speed and wind_speed &lt;= self.wind_rated:                         return self.kW * (wind_speed - self.cutin) / (self.wind_rated - self.cutin)          elif self.wind_rated &lt; wind_speed and wind_speed &lt;= self.cutout:             return self.kW         else:             return 0.  #Instance two wind generators. myWTG1 = WindTurbineGeneratorAbstraction(1500, 11.8, 3.0, 20.0, \"wg1\") myWTG2 = WindTurbineGeneratorAbstraction(1500, 11.8, 3.0, 20.0, \"wg2\")  #Include the two generators in the distribution system. cmd = [     f\"New Generator.{myWTG1.name} bus1=675 Phases=3 kv=4.16 kw={myWTG1.kW} pf=1 model=1\",     f\"New Generator.{myWTG2.name} bus1=680 Phases=3 kv=4.16 kw={myWTG2.kW} pf=1 model=1\"     ] distSys.dsscontent = distSys.dsscontent + cmd   distSys.dsscontent[-1] Out[9]: <pre>'New Generator.wg2 bus1=680 Phases=3 kv=4.16 kw=1500 pf=1 model=1'</pre> In\u00a0[10]: Copied! <pre>from numpy.random import rayleigh\n\nwind_speed_mean = 7\n\n@actions\ndef change_wtg(distSys, wg):\n    #Create a wind speed from Rayleigh distribution.\n    wind_speed = rayleigh(wind_speed_mean)\n\n    #Get the power output from the Wind generator.\n    power_out = wg.power_output(wind_speed)\n\n    #Set the power output in the generator.\n    distSys.run_command(f\"Generator.{wg.name}.kw = {power_out}\")\n\n#Run the action.\nchange_wtg(distSys, myWTG1)\nprint( distSys.run_command(f\"? Generator.{myWTG1.name}.kw\") ) \n\n#Restart the distribution system.\ndistSys.init_sys()\nprint( distSys.run_command(f\"? Generator.{myWTG1.name}.kw\") )\n</pre> from numpy.random import rayleigh  wind_speed_mean = 7  @actions def change_wtg(distSys, wg):     #Create a wind speed from Rayleigh distribution.     wind_speed = rayleigh(wind_speed_mean)      #Get the power output from the Wind generator.     power_out = wg.power_output(wind_speed)      #Set the power output in the generator.     distSys.run_command(f\"Generator.{wg.name}.kw = {power_out}\")  #Run the action. change_wtg(distSys, myWTG1) print( distSys.run_command(f\"? Generator.{myWTG1.name}.kw\") )   #Restart the distribution system. distSys.init_sys() print( distSys.run_command(f\"? Generator.{myWTG1.name}.kw\") ) <pre>1500\n1500\n</pre> <p>However, an <code>Action</code> is only properly executed within a power flow mode when it receives only the instance of <code>SystemClass</code> as an argument. Therefore, we created two other Actions based on <code>change_wtg</code> that exclusively alter one of the wind generators.</p> <p>Finally, we can see the impact of the two generators on the IEEE 13 bus by running the <code>run_mote_carlo</code> again passing the two Actions created.</p> In\u00a0[11]: Copied! <pre># Create a action for each Wind generator.\nchange_wtg1 = lambda distSys: change_wtg(distSys, myWTG1)\nchange_wtg2 = lambda distSys: change_wtg(distSys, myWTG2)\n\n# Run the Monte Carlo with these actions.\nlosses = run_monte_carlo(\n    10000, \n    actions = [change_loads, change_wtg1, change_wtg2], \n    tools = [get_loss]\n)\nlosses_df = reduce_losses(losses)\nlosses_df.boxplot(column=[\"kW\", \"kVAr\"])\nplt.show()\n</pre> # Create a action for each Wind generator. change_wtg1 = lambda distSys: change_wtg(distSys, myWTG1) change_wtg2 = lambda distSys: change_wtg(distSys, myWTG2)  # Run the Monte Carlo with these actions. losses = run_monte_carlo(     10000,      actions = [change_loads, change_wtg1, change_wtg2],      tools = [get_loss] ) losses_df = reduce_losses(losses) losses_df.boxplot(column=[\"kW\", \"kVAr\"]) plt.show() <p>That's all, folks. Now you can create your Action, Tool, and Reduction functions and simulate your super modern smart distribution system.</p>"},{"location":"tutorial/#Learning-DSSData","title":"Learning DSSData\u00b6","text":"<p>In this tutorial, we will learn the main concepts of DSSData. For that, we will run a probabilistic power flow on the IEEE 13 bus (the <code>.dss</code> file can be found in OpenDSS install directory) with two turbine wind generators to observe the impact on the transformer substation losses in the distribution system.</p>"},{"location":"tutorial/#Loading-your-.dss-file","title":"Loading your .dss file\u00b6","text":"<p>To load your <code>.dss</code> file, we import the class <code>SystemClass</code>  and instantiate it, indicating the path to the <code>.dss</code> file and the base system voltage. If all goes well, you can see the name of the distribution system.</p>"},{"location":"tutorial/#Run-power-flow","title":"Run power flow\u00b6","text":""},{"location":"tutorial/#Static-power-flow","title":"Static power flow\u00b6","text":"<p>To run a power flow mode, we need to import a mode from <code>dssdata.pfmodes</code>.</p> <p>The DSSData has some build-in tools that we can using for a quick start. We will talk about <code>Tools</code> in the next topic, for now we can use the <code>voltages</code> tool for run a static power flow using <code>run_static_pf</code> mode and get some voltages.</p>"},{"location":"tutorial/#Time-series-power-flow","title":"Time series power flow\u00b6","text":"<p>If you want run a time series power flow you can import <code>cfg_tspf</code> and <code>run_tspf</code>. The <code>cfg_tspf</code> will configure the OpenDSS to run proprely and <code>run_tspf</code> execute the time series power flow. You can see a simple exemple in Getting Started.</p>"},{"location":"tutorial/#Creating-your-first-Tool","title":"Creating your first Tool\u00b6","text":"<p>To obtain the loss information of the substation, we will create a <code>Tool</code> called <code>get_loss</code>. For this, we import the decorator tools.</p> <p>A <code>Tool</code> is a python function that takes as a parameter only an instance of <code>SystemClass</code> and returns a <code>pandas.DataFrame</code>.</p> <p>We can access the transformer losses by requesting directly from the API OpenDSSDirect.py using the <code>Transformers.Name</code> passing the name of the substation transformer as a parameter.</p> <p>To check if all is ok, we can run a static power flow with our tool.</p>"},{"location":"tutorial/#Creating-your-first-Action","title":"Creating your first Action\u00b6","text":"<p>When implementing a probabilistic power flow, the loads have a stochastic behavior. In this tutorial, we will use the <code>normal</code> function of <code>numpy.random</code> in which the mean value is the nominal power of the load and the standard deviation is a quarter of the nominal power.</p> <p>In this way, we will create an <code>Action</code> called <code>change_loads</code> that changes the active and reactive power of all loads.</p> <p>An Action is a python function with no return, which receives only the instance of <code>SystemClass</code>, modifies the distribution system but does not change the <code>SystemClass.dsscontent</code>.</p> <p>To validate the <code>Action</code> we will execute another probabilistic power flow, and we can see that the losses have changed.</p>"},{"location":"tutorial/#Creating-your-first-Reduction.","title":"Creating your first Reduction.\u00b6","text":"<p>A probabilistic power flow needs to be performed several times to obtain certain conclusions about the behavior of the distribution system. For this, we will create an auxiliary function called <code>run_mote_carlo</code> that executes <code>run_static_pf</code> a certain number of times with Actions and Tools returning a list of all losses.</p> <p>We can validate the function by calling it passing the number of times and the <code>Action</code> and <code>Tool</code> that we created.</p>"},{"location":"tutorial/#Adding-a-new-element.","title":"Adding a new element.\u00b6","text":"<p>Now that we have learned how to work with the three main concepts of DSSData, we can go a little further and add two 1.5 MW wind generators on the 675 and 680 nodes.</p> <p>For this, we will initially create a class called <code>WindTurbineGeneratorAbstraction</code> that abstracts all the components of a wind turbine generator, keeping only the information and behaviors necessary for a study of power flow.</p> <p>After creating the two instances of <code>WindTurbineGeneratorAbstraction</code>, we included both generators in the OpenDSS commands.</p>"},{"location":"tutorial/#Change-the-behavior-of-a-new-element","title":"Change the behavior of a new element\u00b6","text":"<p>In the same way that the loads must have a stochastic behavior, our wind turbine generators must also have. The Rayleigh distribution is normally used to model the stochastic wind speed behavior. In this way, we will create an <code>Action</code> called <code>change_wtg</code> to express this behavior.</p> <p>We can check it by running the <code>Action</code>.</p> <p>The <code>Action</code> generates a change in the distribution system that remains until the end of the execution of the power flow modes or <code>SystemClass.init_sys</code> method.</p>"},{"location":"tutorial/IEEE13bus/IEEE13bus/","title":"IEEE13bus","text":"In\u00a0[\u00a0]: Copied! <pre>import opendssdirect as dss\n</pre> import opendssdirect as dss In\u00a0[\u00a0]: Copied! <pre>dss.run_command(\"Compile test/syste_test_IEEE13bus/IEEE13Nodeckt.dss\")\ndss.run_command(\"Set Voltagebases=[115, 4.16, .48]\")\ndss.run_command(\"calcv\")\ndss.Solution.Solve()\ndss.run_command(\"Show Voltages LN Nodes\")\ndss.run_command(\"Show Losses\")\ndss.run_command(\"Show Currents\")\n</pre> dss.run_command(\"Compile test/syste_test_IEEE13bus/IEEE13Nodeckt.dss\") dss.run_command(\"Set Voltagebases=[115, 4.16, .48]\") dss.run_command(\"calcv\") dss.Solution.Solve() dss.run_command(\"Show Voltages LN Nodes\") dss.run_command(\"Show Losses\") dss.run_command(\"Show Currents\")"}]}